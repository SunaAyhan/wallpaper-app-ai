{"version":3,"file":"static/js/81.225d14eb.chunk.js","mappings":"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","sources":["../node_modules/@capacitor/filesystem/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  AppendFileOptions,\n  CopyOptions,\n  CopyResult,\n  DeleteFileOptions,\n  FilesystemPlugin,\n  GetUriOptions,\n  GetUriResult,\n  MkdirOptions,\n  PermissionStatus,\n  ReadFileOptions,\n  ReadFileResult,\n  ReaddirOptions,\n  ReaddirResult,\n  RenameOptions,\n  RmdirOptions,\n  StatOptions,\n  StatResult,\n  WriteFileOptions,\n  WriteFileResult,\n  Directory,\n} from './definitions';\nimport { Encoding } from './definitions';\n\nfunction resolve(path: string): string {\n  const posix = path.split('/').filter(item => item !== '.');\n  const newPosix: string[] = [];\n\n  posix.forEach(item => {\n    if (\n      item === '..' &&\n      newPosix.length > 0 &&\n      newPosix[newPosix.length - 1] !== '..'\n    ) {\n      newPosix.pop();\n    } else {\n      newPosix.push(item);\n    }\n  });\n\n  return newPosix.join('/');\n}\nfunction isPathParent(parent: string, children: string): boolean {\n  parent = resolve(parent);\n  children = resolve(children);\n  const pathsA = parent.split('/');\n  const pathsB = children.split('/');\n\n  return (\n    parent !== children &&\n    pathsA.every((value, index) => value === pathsB[index])\n  );\n}\n\nexport class FilesystemWeb extends WebPlugin implements FilesystemPlugin {\n  DB_VERSION = 1;\n  DB_NAME = 'Disc';\n\n  private _writeCmds: string[] = ['add', 'put', 'delete'];\n  private _db?: IDBDatabase;\n  static _debug = true;\n  async initDb(): Promise<IDBDatabase> {\n    if (this._db !== undefined) {\n      return this._db;\n    }\n    if (!('indexedDB' in window)) {\n      throw this.unavailable(\"This browser doesn't support IndexedDB\");\n    }\n\n    return new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n      request.onupgradeneeded = FilesystemWeb.doUpgrade;\n      request.onsuccess = () => {\n        this._db = request.result;\n        resolve(request.result);\n      };\n      request.onerror = () => reject(request.error);\n      request.onblocked = () => {\n        console.warn('db blocked');\n      };\n    });\n  }\n\n  static doUpgrade(event: IDBVersionChangeEvent): void {\n    const eventTarget = event.target as IDBOpenDBRequest;\n    const db = eventTarget.result;\n    switch (event.oldVersion) {\n      case 0:\n      case 1:\n      default: {\n        if (db.objectStoreNames.contains('FileStorage')) {\n          db.deleteObjectStore('FileStorage');\n        }\n        const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n        store.createIndex('by_folder', 'folder');\n      }\n    }\n  }\n\n  async dbRequest(cmd: string, args: any[]): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: any = tx.objectStore('FileStorage');\n        const req = store[cmd](...args);\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  async dbIndexRequest(\n    indexName: string,\n    cmd: string,\n    args: [any],\n  ): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: IDBObjectStore = tx.objectStore('FileStorage');\n        const index: any = store.index(indexName);\n        const req = index[cmd](...args) as any;\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  private getPath(\n    directory: Directory | undefined,\n    uriPath: string | undefined,\n  ): string {\n    const cleanedUriPath =\n      uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n    let fsPath = '';\n    if (directory !== undefined) fsPath += '/' + directory;\n    if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n    return fsPath;\n  }\n\n  async clear(): Promise<void> {\n    const conn: IDBDatabase = await this.initDb();\n    const tx: IDBTransaction = conn.transaction(['FileStorage'], 'readwrite');\n    const store: IDBObjectStore = tx.objectStore('FileStorage');\n    store.clear();\n  }\n\n  /**\n   * Read a file from disk\n   * @param options options for the file read\n   * @return a promise that resolves with the read file data result\n   */\n  async readFile(options: ReadFileOptions): Promise<ReadFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    // const encoding = options.encoding;\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    return { data: entry.content ? entry.content : '' };\n  }\n\n  /**\n   * Write a file to disk in the specified location on device\n   * @param options options for the file write\n   * @return a promise that resolves with the file write result\n   */\n  async writeFile(options: WriteFileOptions): Promise<WriteFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const doRecursive = options.recursive;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: doRecursive,\n        });\n      }\n    }\n\n    if (!encoding) {\n      data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n      if (!this.isBase64String(data))\n        throw Error('The supplied data is not valid base64 content.');\n    }\n\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: now,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n    return {\n      uri: pathObj.path,\n    };\n  }\n\n  /**\n   * Append to a file on disk in the specified location on device\n   * @param options options for the file append\n   * @return a promise that resolves with the file write result\n   */\n  async appendFile(options: AppendFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const now = Date.now();\n    let ctime = now;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: true,\n        });\n      }\n    }\n\n    if (!encoding && !this.isBase64String(data))\n      throw Error('The supplied data is not valid base64 content.');\n\n    if (occupiedEntry !== undefined) {\n      if (occupiedEntry.content !== undefined && !encoding) {\n        data = btoa(atob(occupiedEntry.content) + atob(data));\n      } else {\n        data = occupiedEntry.content + data;\n      }\n      ctime = occupiedEntry.ctime;\n    }\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: ctime,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Delete a file from disk\n   * @param options options for the file delete\n   * @return a promise that resolves with the deleted file data result\n   */\n  async deleteFile(options: DeleteFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n      IDBKeyRange.only(path),\n    ]);\n    if (entries.length !== 0) throw Error('Folder is not empty.');\n\n    await this.dbRequest('delete', [path]);\n  }\n\n  /**\n   * Create a directory.\n   * @param options options for the mkdir\n   * @return a promise that resolves with the mkdir result\n   */\n  async mkdir(options: MkdirOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    const doRecursive = options.recursive;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const depth = (path.match(/\\//g) || []).length;\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (depth === 1) throw Error('Cannot create Root directory');\n    if (occupiedEntry !== undefined)\n      throw Error('Current directory does already exist.');\n    if (!doRecursive && depth !== 2 && parentEntry === undefined)\n      throw Error('Parent directory must exist');\n\n    if (doRecursive && depth !== 2 && parentEntry === undefined) {\n      const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n      await this.mkdir({\n        path: parentArgPath,\n        directory: options.directory,\n        recursive: doRecursive,\n      });\n    }\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'directory',\n      size: 0,\n      ctime: now,\n      mtime: now,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Remove a directory\n   * @param options the options for the directory remove\n   */\n  async rmdir(options: RmdirOptions): Promise<void> {\n    const { path, directory, recursive } = options;\n    const fullPath: string = this.getPath(directory, path);\n\n    const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n\n    if (entry === undefined) throw Error('Folder does not exist.');\n\n    if (entry.type !== 'directory')\n      throw Error('Requested path is not a directory');\n\n    const readDirResult = await this.readdir({ path, directory });\n\n    if (readDirResult.files.length !== 0 && !recursive)\n      throw Error('Folder is not empty');\n\n    for (const entry of readDirResult.files) {\n      const entryPath = `${path}/${entry.name}`;\n      const entryObj = await this.stat({ path: entryPath, directory });\n      if (entryObj.type === 'file') {\n        await this.deleteFile({ path: entryPath, directory });\n      } else {\n        await this.rmdir({ path: entryPath, directory, recursive });\n      }\n    }\n\n    await this.dbRequest('delete', [fullPath]);\n  }\n\n  /**\n   * Return a list of files from the directory (not recursive)\n   * @param options the options for the readdir operation\n   * @return a promise that resolves with the readdir directory listing result\n   */\n  async readdir(options: ReaddirOptions): Promise<ReaddirResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (options.path !== '' && entry === undefined)\n      throw Error('Folder does not exist.');\n\n    const entries: string[] = await this.dbIndexRequest(\n      'by_folder',\n      'getAllKeys',\n      [IDBKeyRange.only(path)],\n    );\n    const files = await Promise.all(\n      entries.map(async e => {\n        let subEntry = (await this.dbRequest('get', [e])) as EntryObj;\n        if (subEntry === undefined) {\n          subEntry = (await this.dbRequest('get', [e + '/'])) as EntryObj;\n        }\n        return {\n          name: e.substring(path.length + 1),\n          type: subEntry.type,\n          size: subEntry.size,\n          ctime: subEntry.ctime,\n          mtime: subEntry.mtime,\n          uri: subEntry.path,\n        };\n      }),\n    );\n    return { files: files };\n  }\n\n  /**\n   * Return full File URI for a path and directory\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async getUri(options: GetUriOptions): Promise<GetUriResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    return {\n      uri: entry?.path || path,\n    };\n  }\n\n  /**\n   * Return data about a file\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async stat(options: StatOptions): Promise<StatResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    if (entry === undefined) throw Error('Entry does not exist.');\n\n    return {\n      type: entry.type,\n      size: entry.size,\n      ctime: entry.ctime,\n      mtime: entry.mtime,\n      uri: entry.path,\n    };\n  }\n\n  /**\n   * Rename a file or directory\n   * @param options the options for the rename operation\n   * @return a promise that resolves with the rename result\n   */\n  async rename(options: RenameOptions): Promise<void> {\n    await this._copy(options, true);\n    return;\n  }\n\n  /**\n   * Copy a file or directory\n   * @param options the options for the copy operation\n   * @return a promise that resolves with the copy result\n   */\n  async copy(options: CopyOptions): Promise<CopyResult> {\n    return this._copy(options, false);\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  /**\n   * Function that can perform a copy or a rename\n   * @param options the options for the rename operation\n   * @param doRename whether to perform a rename or copy operation\n   * @return a promise that resolves with the result\n   */\n  private async _copy(\n    options: CopyOptions,\n    doRename = false,\n  ): Promise<CopyResult> {\n    let { toDirectory } = options;\n    const { to, from, directory: fromDirectory } = options;\n\n    if (!to || !from) {\n      throw Error('Both to and from must be provided');\n    }\n\n    // If no \"to\" directory is provided, use the \"from\" directory\n    if (!toDirectory) {\n      toDirectory = fromDirectory;\n    }\n\n    const fromPath = this.getPath(fromDirectory, from);\n    const toPath = this.getPath(toDirectory, to);\n\n    // Test that the \"to\" and \"from\" locations are different\n    if (fromPath === toPath) {\n      return {\n        uri: toPath,\n      };\n    }\n\n    if (isPathParent(fromPath, toPath)) {\n      throw Error('To path cannot contain the from path');\n    }\n\n    // Check the state of the \"to\" location\n    let toObj;\n    try {\n      toObj = await this.stat({\n        path: to,\n        directory: toDirectory,\n      });\n    } catch (e) {\n      // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n      const toPathComponents = to.split('/');\n      toPathComponents.pop();\n      const toPath = toPathComponents.join('/');\n\n      // Check the containing directory of the \"to\" location exists\n      if (toPathComponents.length > 0) {\n        const toParentDirectory = await this.stat({\n          path: toPath,\n          directory: toDirectory,\n        });\n\n        if (toParentDirectory.type !== 'directory') {\n          throw new Error('Parent directory of the to path is a file');\n        }\n      }\n    }\n\n    // Cannot overwrite a directory\n    if (toObj && toObj.type === 'directory') {\n      throw new Error('Cannot overwrite a directory with a file');\n    }\n\n    // Ensure the \"from\" object exists\n    const fromObj = await this.stat({\n      path: from,\n      directory: fromDirectory,\n    });\n\n    // Set the mtime/ctime of the supplied path\n    const updateTime = async (path: string, ctime: number, mtime: number) => {\n      const fullPath: string = this.getPath(toDirectory, path);\n      const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n      entry.ctime = ctime;\n      entry.mtime = mtime;\n      await this.dbRequest('put', [entry]);\n    };\n\n    const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n\n    switch (fromObj.type) {\n      // The \"from\" object is a file\n      case 'file': {\n        // Read the file\n        const file = await this.readFile({\n          path: from,\n          directory: fromDirectory,\n        });\n\n        // Optionally remove the file\n        if (doRename) {\n          await this.deleteFile({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n\n        let encoding;\n        if (!this.isBase64String(file.data)) {\n          encoding = Encoding.UTF8;\n        }\n\n        // Write the file to the new location\n        const writeResult = await this.writeFile({\n          path: to,\n          directory: toDirectory,\n          data: file.data,\n          encoding: encoding,\n        });\n\n        // Copy the mtime/ctime of a renamed file\n        if (doRename) {\n          await updateTime(to, ctime, fromObj.mtime);\n        }\n\n        // Resolve promise\n        return writeResult;\n      }\n      case 'directory': {\n        if (toObj) {\n          throw Error('Cannot move a directory over an existing object');\n        }\n\n        try {\n          // Create the to directory\n          await this.mkdir({\n            path: to,\n            directory: toDirectory,\n            recursive: false,\n          });\n\n          // Copy the mtime/ctime of a renamed directory\n          if (doRename) {\n            await updateTime(to, ctime, fromObj.mtime);\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // Iterate over the contents of the from location\n        const contents = (\n          await this.readdir({\n            path: from,\n            directory: fromDirectory,\n          })\n        ).files;\n\n        for (const filename of contents) {\n          // Move item from the from directory to the to directory\n          await this._copy(\n            {\n              from: `${from}/${filename.name}`,\n              to: `${to}/${filename.name}`,\n              directory: fromDirectory,\n              toDirectory,\n            },\n            doRename,\n          );\n        }\n\n        // Optionally remove the original from directory\n        if (doRename) {\n          await this.rmdir({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n      }\n    }\n    return {\n      uri: toPath,\n    };\n  }\n\n  private isBase64String(str: string): boolean {\n    try {\n      return btoa(atob(str)) == str;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\ninterface EntryObj {\n  path: string;\n  folder: string;\n  type: 'directory' | 'file';\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri?: string;\n  content?: string;\n}\n"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","_WebPlugin","_inherits","_super","_createSuper","_this","_classCallCheck","DB_VERSION","DB_NAME","_writeCmds","_createClass","key","_initDb","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","wrap","_context","prev","next","undefined","this","_db","abrupt","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","stop","apply","arguments","_dbRequest","_callee2","cmd","args","readFlag","_context2","indexOf","initDb","then","conn","store","transaction","objectStore","req","_toConsumableArray","_x","_x2","_dbIndexRequest","_callee3","indexName","_context3","_x3","_x4","_x5","directory","uriPath","cleanedUriPath","replace","fsPath","_clear","_callee4","tx","_context4","sent","clear","_readFile","_callee5","options","entry","_context5","getPath","dbRequest","Error","data","content","_x6","_writeFile","_callee6","encoding","doRecursive","occupiedEntry","parentPath","subDirIndex","parentArgPath","now","pathObj","_context6","recursive","type","substr","lastIndexOf","mkdir","isBase64String","Date","folder","size","ctime","mtime","uri","_x7","_appendFile","_callee7","_context7","btoa","atob","_x8","_deleteFile","_callee8","_context8","dbIndexRequest","IDBKeyRange","only","_x9","_mkdir","_callee9","depth","parentEntry","_context9","match","_x10","_rmdir","_callee10","fullPath","readDirResult","_iterator","_step","_entry","entryPath","_context10","readdir","files","_createForOfIteratorHelper","s","n","done","concat","name","stat","deleteFile","rmdir","t0","e","f","finish","_x11","_readdir","_callee12","entries","_this3","_context12","all","map","_ref","_callee11","subEntry","_context11","substring","_x13","_x12","_getUri","_callee13","_context13","_x14","_stat","_callee14","_context14","_x15","_rename","_callee15","_context15","_copy","_x16","_copy2","_callee16","_context16","_x17","_requestPermissions","_callee17","_context17","publicStorage","_checkPermissions","_callee18","_context18","_copy3","_callee20","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","_toPath","fromObj","updateTime","file","writeResult","contents","_iterator2","_step2","filename","_this4","_args20","_context20","_ref2","_callee19","_context19","_x19","_x20","_x21","t1","readFile","Encoding","UTF8","writeFile","t2","t3","_x18","str","err","event","db","target","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","WebPlugin","_debug"],"sourceRoot":""}